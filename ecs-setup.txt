-------------------------------------------------------
ECS Cluster setup
-------------------------------------------------------
$ aws ecs create-cluster --cluster-name ecs-scaling

$ aws ec2 run-instances --image-id ami-2b3b6041 --count 1 --instance-type t2.micro --iam-instance-profile Name=ecsInstanceRole \
--key-name ecs-key-pair-us-east-1 --security-group-ids sg-69e3fc1c --user-data \
file:///Users/markthill/projects/aws/ecs-cluster-setup/copy-ecs-config-to-s3

grab the instance id from the output:  i-014ba444f0f5b50f0

$ aws ec2 describe-instances

grab the public dns from describe-instances:  ec2-18-208-169-73.compute-1.amazonaws.com

$ aws ecs list-container-instances --cluster ecs-scaling 

# Create the task definition for nginx
$ aws ecs register-task-definition --cli-input-json file:///Users/markthill/projects/aws/ecs-cluster-setup/web-task-definition.json

$ aws ecs list-task-definition-families

# Create a service
aws ecs create-service --cluster ecs-scaling --service-name web-nginx --task-definition web-nginx --desired-count 1

aws ecs create-service --cluster ecs-scaling --service-name web-nginx --task-definition web-nginx --desired-count 1 --tags key=Environment,value=development key=Tier,value=ecs  key=MinimumServiceSize,value=1 key=MaximumServiceSize,value=3

# get the port for the task
aws ecs describe-tasks --cluster ecs-scaling  --tasks arn:aws:ecs:us-east-1:236189869841:task/ecs-scaling/40201c7ebe304aaaa7bfb2fd320cc3b4

# list services
$ aws ecs list-services --cluster ecs-scaling

# Describe services
$ aws ecs describe-services --cluster ecs-scaling --services web-nginx

# List all the running tasks
$ aws ecs list-tasks --cluster ecs-scaling

# Describe a task (using arn from above call)
aws ecs describe-tasks --cluster ecs-scaling  --tasks arn:aws:ecs:us-east-1:236189869841:task/ecs-scaling/ce442647161b40af8bddc95c7cc48b11

$ aws ec2 describe-instances

get the public dns:  ec2-3-87-243-191.compute-1.amazonaws.com

# Attempt to add another service, but failed because on the same port
$ aws ecs update-service --cluster ecs-scaling --service web-nginx --task-definition web-nginx --desired-count 2

# SSH to the ec2 instance
ssh -i /Users/markthill/projects/aws/key-pairs/ecs-key-pair-us-east-1.pem ec2-user@ec2-18-208-169-73.compute-1.amazonaws.com

-------------------------------------------------------
Simulate Work
-------------------------------------------------------

# pull the docker image we will use to simulate load
docker pull williamyeh/wrk

# get the hostname of the machine.  Use public dns of ec2
hostname -I | cut -d ' ' -f 1

# simulate Work
docker run --rm williamyeh/wrk -t10 -c500 -d10s http://ec2-18-208-169-73.compute-1.amazonaws.com:32777

# Show the stats of the container
$ docker ps
# Take the container id and use it in
$ docker stats 4fffe63fda5d


-------------------------------------------------------
ECS Cluster teardown
-------------------------------------------------------

# Remove service by first setting count to 0
aws ecs update-service --cluster ecs-scaling --service web-nginx --task-definition web-nginx --desired-count 0

# Then remove the service
aws ecs delete-service --cluster ecs-scaling --service web-nginx

# list services to see that it is gone
aws ecs list-services --cluster ecs-scaling

$ aws ec2 terminate-instances --instance-ids i-003f83d64a375c794

# Delete the cluster
$ aws ecs delete-cluster --cluster ecs-scaling

-------------------------------------------------------
Cloudwatch Metrics
-------------------------------------------------------

aws cloudwatch get-metric-statistics --namespace ecs --metric-name CPUUtilization \ 
--statistics "Sum" "Maximum" "Minimum" "Average" "SampleCount" \ 
--start-time 2016-10-20T12:00:00.000Z --end-time 2016-10-20T12:05:00.000Z --period 60

aws cloudwatch get-metric-statistics --metric-name CPUUtilization --start-time 2020-03-25T07:00:00Z \
--end-time 2020-03-25T23:08:00Z --period 3600 --namespace AWS/EC2 --statistics Maximum Minimum Sum Average SampleCount \
--dimensions Name=InstanceId,Value=i-0cb8168a3dd4bb140


-------------------------------------------------------
Cloudwatch Metrics Service Utilization
-------------------------------------------------------

                                      (Total CPU units used by tasks in service) x 100
Service CPU utilization =  ----------------------------------------------------------------------------
                           (Total CPU units specified in task definition) x (number of tasks in service)

            Example     .30 Cpu Units x 100         30
                        -------------------  =    ------  = .14 or 14%
                            102 X 2                 204


                                         (Total MiB of memory used by tasks in service) x 100
Service memory utilization =  --------------------------------------------------------------------------------
                              (Total MiB of memory specified in task definition) x (number of tasks in service)


statistics
aws cloudwatch get-metric-statistics --metric-name CPUUtilization --start-time 2020-03-31T20:00:00Z --end-time 2020-03-31T20:10:00Z --period 60 --namespace AWS/EC2 --statistics Maximum --dimensions Name=InstanceId,Value=i-0046fec81687d53a0

aws cloudwatch get-metric-statistics --metric-name CPUUtilization --start-time 2020-04-01T17:00:00Z --end-time 2020-04-01T17:30:00Z --period 60 --namespace AWS/ECS --statistics Maximum --dimensions Name=ClusterName,Value=ecs-scaling 

aws cloudwatch put-metric-data --metric-name CPUUtilization --namespace AWS/ECS --value 10 --unit Percent --dimensions Name=ClusterName,Value=ecs-scaling Name=ServiceName,Value=web-nginx

------------------------------
target tracking scaling
------------------------------

aws application-autoscaling describe-scalable-targets --service-namespace ecs

aws application-autoscaling register-scalable-target \
    --service-namespace ecs \
    --scalable-dimension ecs:service:DesiredCount \
    --resource-id service/ecs-scaling/web-nginx \
    --min-capacity 1 \
    --max-capacity 4

aws application-autoscaling put-scaling-policy --service-namespace ecs \
  --scalable-dimension ecs:service:DesiredCount \
  --resource-id service/ecs-scaling/web-nginx \
  --policy-name ecs-scaling-policy --policy-type TargetTrackingScaling \
  --target-tracking-scaling-policy-configuration file:///Users/markthill/projects/aws/ecs-cluster-setup/target-tracking-scaling-policy.json

aws application-autoscaling delete-scaling-policy --service-namespace ecs \
  --scalable-dimension ecs:service:DesiredCount \
  --resource-id service/ecs-scaling/web-nginx \
  --policy-name ecs-scaling-policy

------------------------------
step scaling
------------------------------
OUT
------

aws application-autoscaling put-scaling-policy --service-namespace ecs \
  --scalable-dimension ecs:service:DesiredCount \
  --resource-id service/ecs-scaling/web-nginx \
  --policy-name ecs-step-scaling-policy --policy-type StepScaling \
  --step-scaling-policy-configuration file:///Users/markthill/projects/aws/ecs-cluster-setup/step-scaling-policy-out.json

get the policy arn

"PolicyARN": "arn:aws:autoscaling:us-east-1:236189869841:scalingPolicy:71b69421-42d6-4f4a-a2ce-e4b17402110e:resource/ecs/service/ecs-scaling/web-nginx:policyName/ecs-step-scaling-policy",

aws cloudwatch put-metric-alarm --alarm-name Step-Scaling-AlarmHigh-ECS:service/ecs-scaling/web-nginx \
  --metric-name CPUUtilization --namespace AWS/ECS --statistic Average \
  --period 60 --evaluation-periods 2 --threshold 30 \
  --comparison-operator GreaterThanOrEqualToThreshold \
  --dimensions Name=ClusterName,Value=ecs-scaling Name=ServiceName,Value=web-nginx \
  --alarm-actions arn:aws:autoscaling:us-east-1:236189869841:scalingPolicy:71b69421-42d6-4f4a-a2ce-e4b17402110e:resource/ecs/service/ecs-scaling/web-nginx:policyName/ecs-step-scaling-policy

IN
--------

aws application-autoscaling put-scaling-policy --service-namespace ecs \
  --scalable-dimension ecs:service:DesiredCount \
  --resource-id service/ecs-scaling/web-nginx \
  --policy-name ecs-step-scaling-policy-in --policy-type StepScaling \
  --step-scaling-policy-configuration file:///Users/markthill/projects/aws/ecs-cluster-setup/step-scaling-policy-in.json

get the policy arn

arn:aws:autoscaling:us-east-1:236189869841:scalingPolicy:71b69421-42d6-4f4a-a2ce-e4b17402110e:resource/ecs/service/ecs-scaling/web-nginx:policyName/ecs-step-scaling-policy-in

aws cloudwatch put-metric-alarm --alarm-name Step-Scaling-AlarmLow-ECS:service/ecs-scaling/web-nginx \
  --metric-name CPUUtilization --namespace AWS/ECS --statistic Average \
  --period 60 --evaluation-periods 2 --threshold 25 \
  --comparison-operator LessThanOrEqualToThreshold \
  --dimensions Name=ClusterName,Value=ecs-scaling Name=ServiceName,Value=web-nginx \
  --alarm-actions arn:aws:autoscaling:us-east-1:236189869841:scalingPolicy:71b69421-42d6-4f4a-a2ce-e4b17402110e:resource/ecs/service/ecs-scaling/web-nginx:policyName/ecs-step-scaling-policy-in


